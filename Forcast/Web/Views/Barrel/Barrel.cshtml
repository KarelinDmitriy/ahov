@model Web.Models.Barrel.BarrelModel

@{
	var formId = "Form_" + Model.Barrel.BarrelId;
	var targetId = "Answer_" + Model.Barrel.BarrelId;
	var panelId = "Panel_" + Model.Barrel.BarrelId;
	var waitId = "Wait_" + Model.Barrel.BarrelId;
	var waitFClose = "WaitC_" + Model.Barrel.BarrelId;
}


<div id="@panelId" class="row">
	<div>
		@using (Html.BeginForm("Edit", "Barrel", FormMethod.Post, new { @class = "form-inline", id = @formId }))
		{
			<div class="text-right"
			     onclick="SendAndRemove('@Url.Action("Delete", "Barrel", new {barrelId = Model.Barrel.BarrelId})', '#@panelId', '#@waitFClose')">
				<img class="hidden" id="@waitFClose" src="~/Content/Images/loadAnimation.GIF" alt="" />
				<a role="button"><i class="glyphicon glyphicon-remove"></i></a>
			</div>
			@Html.HiddenFor(x => x.Barrel.BarrelId)
			@Html.HiddenFor(x => x.Barrel.ObjectId)
			@Html.HiddenFor(x => x.Barrel.Org.Id)
			<div class="row">
				@Html.EditorFor(x => x.Barrel.Name, "StringEditor")
				@Html.EditorFor(x => x.Barrel.H, "NumberEditor")
				@Html.EditorFor(x => x.Barrel.Q, "NumberEditor")
			</div>
			<div class="row">
				<div class="col-md-4">
					@Html.LabelFor(x => x.Barrel.Code)
					@Html.DropDownListFor(x => x.Barrel.Code, Model.AvailableMatter.Select(x =>
						new SelectListItem
						{
							Value = x.Code,
							Text = x.Name,
							Selected = x.Code == Model.Barrel.Code,
							Disabled = false,
						}), new {@class = "form-control"})
				</div>
				@Html.EditorFor(x => x.Barrel.Draining, "DropDownEditor")
				@Html.EditorFor(x => x.Barrel.SaveType, "DropDownEditor")
			</div>
			<input class="btn btn-info" type="button" value="Сохранить" id="Barrel_@Model.Barrel.ObjectId"
			       onclick="SubmitAndRender('#@formId', '@Url.Action("Edit", "Barrel")', '#@targetId', '#@waitId')"/>
			<img class="hidden" id="@waitId" src="~/Content/Images/loadAnimation.GIF" alt="" />
			<div>
				<div id="@targetId"></div>
			</div>
		}
	</div>
	<hr/>
</div>